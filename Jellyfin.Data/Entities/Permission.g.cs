//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Jellyfin.Data
{
   public partial class Permission
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected Permission()
      {
         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static Permission CreatePermissionUnsafe()
      {
         return new Permission();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="kind"></param>
      /// <param name="value"></param>
      /// <param name="_user0"></param>
      /// <param name="_group1"></param>
      public Permission(global::Jellyfin.Data.PermissionKind kind, bool value, global::Jellyfin.Data.User _user0, global::Jellyfin.Data.Group _group1)
      {
         this.Kind = kind;

         this.Value = value;

         if (_user0 == null) throw new ArgumentNullException(nameof(_user0));
         _user0.Permissions.Add(this);

         if (_group1 == null) throw new ArgumentNullException(nameof(_group1));
         _group1.GroupPermissions.Add(this);


         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="kind"></param>
      /// <param name="value"></param>
      /// <param name="_user0"></param>
      /// <param name="_group1"></param>
      public static Permission Create(global::Jellyfin.Data.PermissionKind kind, bool value, global::Jellyfin.Data.User _user0, global::Jellyfin.Data.Group _group1)
      {
         return new Permission(kind, value, _user0, _group1);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Indexed, Required
      /// </summary>
      [Key]
      [Required]
      public int Id { get; protected set; }

      /// <summary>
      /// Backing field for Kind
      /// </summary>
      protected global::Jellyfin.Data.PermissionKind _Kind;
      /// <summary>
      /// When provided in a partial class, allows value of Kind to be changed before setting.
      /// </summary>
      partial void SetKind(global::Jellyfin.Data.PermissionKind oldValue, ref global::Jellyfin.Data.PermissionKind newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Kind to be changed before returning.
      /// </summary>
      partial void GetKind(ref global::Jellyfin.Data.PermissionKind result);

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public global::Jellyfin.Data.PermissionKind Kind
      {
         get
         {
            global::Jellyfin.Data.PermissionKind value = _Kind;
            GetKind(ref value);
            return (_Kind = value);
         }
         set
         {
            global::Jellyfin.Data.PermissionKind oldValue = _Kind;
            SetKind(oldValue, ref value);
            if (oldValue != value)
            {
               _Kind = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public bool Value { get; set; }

      /// <summary>
      /// Concurrency token
      /// </summary>
      [Timestamp]
      public Byte[] Timestamp { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      public virtual event PropertyChangedEventHandler PropertyChanged;

      protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
      {
         PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }

   }
}

