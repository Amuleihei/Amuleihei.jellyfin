//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Jellyfin.Data
{
   /// <inheritdoc/>
   public partial class JellyfinDb : DbContext
   {
      #region DbSets
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.ActivityLog> ActivityLogs { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Artwork> Artwork { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Book> Books { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.BookMetadata> BookMetadata { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Chapter> Chapters { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Collection> Collections { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.CollectionItem> CollectionItems { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Company> Companies { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.CompanyMetadata> CompanyMetadata { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.CustomItem> CustomItems { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.CustomItemMetadata> CustomItemMetadata { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Episode> Episodes { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.EpisodeMetadata> EpisodeMetadata { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Genre> Genres { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Group> Groups { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Library> Libraries { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.LibraryItem> LibraryItems { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.LibraryRoot> LibraryRoot { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.MediaFile> MediaFiles { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.MediaFileStream> MediaFileStream { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Metadata> Metadata { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.MetadataProvider> MetadataProviders { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.MetadataProviderId> MetadataProviderIds { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Movie> Movies { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.MovieMetadata> MovieMetadata { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.MusicAlbum> MusicAlbums { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.MusicAlbumMetadata> MusicAlbumMetadata { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Permission> Permissions { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Person> People { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.PersonRole> PersonRoles { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Photo> Photo { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.PhotoMetadata> PhotoMetadata { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Preference> Preferences { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.ProviderMapping> ProviderMappings { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Rating> Ratings { get; set; }

      /// <summary>
      /// Repository for global::Jellyfin.Data.RatingSource - This is the entity to store review
      /// ratings, not age ratings
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.RatingSource> RatingSources { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Release> Releases { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Season> Seasons { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.SeasonMetadata> SeasonMetadata { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Series> Series { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.SeriesMetadata> SeriesMetadata { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.Track> Tracks { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.TrackMetadata> TrackMetadata { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Jellyfin.Data.User> Users { get; set; }
      #endregion DbSets

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Data Source=jellyfin.db";

      /// <inheritdoc />
      public JellyfinDb(DbContextOptions<JellyfinDb> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("jellyfin");

         modelBuilder.Entity<global::Jellyfin.Data.ActivityLog>()
                     .ToTable("ActivityLogs")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.ActivityLog>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.ActivityLog>()
                     .Property(t => t.Name)
                     .HasMaxLength(512)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.ActivityLog>()
                     .Property(t => t.Overview)
                     .HasMaxLength(512);
         modelBuilder.Entity<global::Jellyfin.Data.ActivityLog>()
                     .Property(t => t.ShortOverview)
                     .HasMaxLength(512);
         modelBuilder.Entity<global::Jellyfin.Data.ActivityLog>()
                     .Property(t => t.Type)
                     .HasMaxLength(256)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.ActivityLog>()
                     .Property(t => t.ItemId)
                     .HasMaxLength(256);
         modelBuilder.Entity<global::Jellyfin.Data.ActivityLog>()
                     .Property(t => t.UserId)
                     .HasMaxLength(256);
         modelBuilder.Entity<global::Jellyfin.Data.ActivityLog>()
                     .Property(t => t.DateCreated)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.ActivityLog>()
                     .Property(t => t.LogSeverity)
                     .HasMaxLength(256)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.ActivityLog>().Property<byte[]>("Timestamp").IsConcurrencyToken();

         modelBuilder.Entity<global::Jellyfin.Data.Artwork>()
                     .ToTable("Artwork")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Artwork>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Artwork>()
                     .Property(t => t.Path)
                     .HasMaxLength(65535)
                     .IsRequired()
                     .HasField("_Path")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Artwork>()
                     .Property(t => t.Kind)
                     .IsRequired()
                     .HasField("_Kind")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Artwork>().HasIndex(t => t.Kind);
         modelBuilder.Entity<global::Jellyfin.Data.Artwork>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();

         modelBuilder.Entity<global::Jellyfin.Data.Book>()
                     .HasMany(x => x.BookMetadata)
                     .WithOne()
                     .HasForeignKey("BookMetadata_BookMetadata_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Book>()
                     .HasMany(x => x.Releases)
                     .WithOne()
                     .HasForeignKey("Release_Releases_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.BookMetadata>()
                     .Property(t => t.ISBN)
                     .HasField("_ISBN")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.BookMetadata>()
                     .HasMany(x => x.Publishers)
                     .WithOne()
                     .HasForeignKey("Company_Publishers_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.Chapter>()
                     .ToTable("Chapter")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Chapter>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Chapter>()
                     .Property(t => t.Name)
                     .HasMaxLength(1024)
                     .HasField("_Name")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Chapter>()
                     .Property(t => t.Language)
                     .HasMaxLength(3)
                     .IsRequired()
                     .HasField("_Language")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Chapter>()
                     .Property(t => t.TimeStart)
                     .IsRequired()
                     .HasField("_TimeStart")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Chapter>()
                     .Property(t => t.TimeEnd)
                     .HasField("_TimeEnd")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Chapter>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();

         modelBuilder.Entity<global::Jellyfin.Data.Collection>()
                     .ToTable("Collection")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Collection>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Collection>()
                     .Property(t => t.Name)
                     .HasMaxLength(1024)
                     .HasField("_Name")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Collection>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.Collection>()
                     .HasMany(x => x.CollectionItem)
                     .WithOne()
                     .HasForeignKey("CollectionItem_CollectionItem_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.CollectionItem>()
                     .ToTable("CollectionItem")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.CollectionItem>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.CollectionItem>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.CollectionItem>()
                     .HasOne(x => x.LibraryItem)
                     .WithOne()
                     .HasForeignKey<global::Jellyfin.Data.CollectionItem>("LibraryItem_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.CollectionItem>()
                     .HasOne(x => x.Next)
                     .WithOne()
                     .HasForeignKey<global::Jellyfin.Data.CollectionItem>("CollectionItem_Next_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.CollectionItem>()
                     .HasOne(x => x.Previous)
                     .WithOne()
                     .HasForeignKey<global::Jellyfin.Data.CollectionItem>("CollectionItem_Previous_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.Company>()
                     .ToTable("Company")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Company>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Company>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.Company>()
                     .HasMany(x => x.CompanyMetadata)
                     .WithOne()
                     .HasForeignKey("CompanyMetadata_CompanyMetadata_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Company>()
                     .HasOne(x => x.Parent)
                     .WithOne()
                     .HasForeignKey<global::Jellyfin.Data.Company>("Company_Parent_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.CompanyMetadata>()
                     .Property(t => t.Description)
                     .HasMaxLength(65535)
                     .HasField("_Description")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.CompanyMetadata>()
                     .Property(t => t.Headquarters)
                     .HasMaxLength(255)
                     .HasField("_Headquarters")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.CompanyMetadata>()
                     .Property(t => t.Country)
                     .HasMaxLength(2)
                     .HasField("_Country")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.CompanyMetadata>()
                     .Property(t => t.Homepage)
                     .HasMaxLength(1024)
                     .HasField("_Homepage")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);

         modelBuilder.Entity<global::Jellyfin.Data.CustomItem>()
                     .HasMany(x => x.CustomItemMetadata)
                     .WithOne()
                     .HasForeignKey("CustomItemMetadata_CustomItemMetadata_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.CustomItem>()
                     .HasMany(x => x.Releases)
                     .WithOne()
                     .HasForeignKey("Release_Releases_Id")
                     .IsRequired();


         modelBuilder.Entity<global::Jellyfin.Data.Episode>()
                     .Property(t => t.EpisodeNumber)
                     .HasField("_EpisodeNumber")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Episode>()
                     .HasMany(x => x.Releases)
                     .WithOne()
                     .HasForeignKey("Release_Releases_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Episode>()
                     .HasMany(x => x.EpisodeMetadata)
                     .WithOne()
                     .HasForeignKey("EpisodeMetadata_EpisodeMetadata_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.EpisodeMetadata>()
                     .Property(t => t.Outline)
                     .HasMaxLength(1024)
                     .HasField("_Outline")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.EpisodeMetadata>()
                     .Property(t => t.Plot)
                     .HasMaxLength(65535)
                     .HasField("_Plot")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.EpisodeMetadata>()
                     .Property(t => t.Tagline)
                     .HasMaxLength(1024)
                     .HasField("_Tagline")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);

         modelBuilder.Entity<global::Jellyfin.Data.Genre>()
                     .ToTable("Genre")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Genre>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Genre>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired()
                     .HasField("_Name")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Genre>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::Jellyfin.Data.Genre>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();

         modelBuilder.Entity<global::Jellyfin.Data.Group>()
                     .ToTable("Groups")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Group>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Group>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Group>().Property<byte[]>("Timestamp").IsConcurrencyToken();
         modelBuilder.Entity<global::Jellyfin.Data.Group>()
                     .HasMany(x => x.GroupPermissions)
                     .WithOne()
                     .HasForeignKey("Permission_GroupPermissions_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Group>()
                     .HasMany(x => x.ProviderMappings)
                     .WithOne()
                     .HasForeignKey("ProviderMapping_ProviderMappings_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Group>()
                     .HasMany(x => x.Preferences)
                     .WithOne()
                     .HasForeignKey("Preference_Preferences_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.Library>()
                     .ToTable("Library")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Library>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Library>()
                     .Property(t => t.Name)
                     .HasMaxLength(1024)
                     .IsRequired()
                     .HasField("_Name")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Library>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();

         modelBuilder.Entity<global::Jellyfin.Data.LibraryItem>()
                     .ToTable("LibraryItem")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.LibraryItem>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.LibraryItem>()
                     .Property(t => t.UrlId)
                     .IsRequired()
                     .HasField("_UrlId")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.LibraryItem>().HasIndex(t => t.UrlId)
                     .IsUnique();
         modelBuilder.Entity<global::Jellyfin.Data.LibraryItem>()
                     .Property(t => t.DateAdded)
                     .IsRequired()
                     .HasField("_DateAdded")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.LibraryItem>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.LibraryItem>()
                     .HasOne(x => x.LibraryRoot)
                     .WithOne()
                     .HasForeignKey<global::Jellyfin.Data.LibraryItem>("LibraryRoot_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.LibraryRoot>()
                     .ToTable("LibraryRoot")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.LibraryRoot>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.LibraryRoot>()
                     .Property(t => t.Path)
                     .HasMaxLength(65535)
                     .IsRequired()
                     .HasField("_Path")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.LibraryRoot>()
                     .Property(t => t.NetworkPath)
                     .HasMaxLength(65535)
                     .HasField("_NetworkPath")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.LibraryRoot>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.LibraryRoot>()
                     .HasOne(x => x.Library)
                     .WithOne()
                     .HasForeignKey<global::Jellyfin.Data.LibraryRoot>("Library_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.MediaFile>()
                     .ToTable("MediaFile")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.MediaFile>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.MediaFile>()
                     .Property(t => t.Path)
                     .HasMaxLength(65535)
                     .IsRequired()
                     .HasField("_Path")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MediaFile>()
                     .Property(t => t.Kind)
                     .IsRequired()
                     .HasField("_Kind")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MediaFile>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.MediaFile>()
                     .HasMany(x => x.MediaFileStreams)
                     .WithOne()
                     .HasForeignKey("MediaFileStream_MediaFileStreams_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.MediaFileStream>()
                     .ToTable("MediaFileStream")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.MediaFileStream>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.MediaFileStream>()
                     .Property(t => t.StreamNumber)
                     .IsRequired()
                     .HasField("_StreamNumber")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MediaFileStream>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();

         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .ToTable("Metadata")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .Property(t => t.Title)
                     .HasMaxLength(1024)
                     .IsRequired()
                     .HasField("_Title")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .Property(t => t.OriginalTitle)
                     .HasMaxLength(1024)
                     .HasField("_OriginalTitle")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .Property(t => t.SortTitle)
                     .HasMaxLength(1024)
                     .HasField("_SortTitle")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .Property(t => t.Language)
                     .HasMaxLength(3)
                     .IsRequired()
                     .HasField("_Language")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .Property(t => t.ReleaseDate)
                     .HasField("_ReleaseDate")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .Property(t => t.DateAdded)
                     .IsRequired()
                     .HasField("_DateAdded")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .Property(t => t.DateModified)
                     .IsRequired()
                     .HasField("_DateModified")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .HasMany(x => x.PersonRoles)
                     .WithOne()
                     .HasForeignKey("PersonRole_PersonRoles_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .HasMany(x => x.Genres)
                     .WithOne()
                     .HasForeignKey("Genre_Genres_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .HasMany(x => x.Artwork)
                     .WithOne()
                     .HasForeignKey("Artwork_Artwork_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .HasMany(x => x.Ratings)
                     .WithOne()
                     .HasForeignKey("Rating_Ratings_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Metadata>()
                     .HasMany(x => x.Sources)
                     .WithOne()
                     .HasForeignKey("MetadataProviderId_Sources_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.MetadataProvider>()
                     .ToTable("MetadataProvider")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.MetadataProvider>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.MetadataProvider>()
                     .Property(t => t.Name)
                     .HasMaxLength(1024)
                     .IsRequired()
                     .HasField("_Name")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MetadataProvider>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();

         modelBuilder.Entity<global::Jellyfin.Data.MetadataProviderId>()
                     .ToTable("MetadataProviderId")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.MetadataProviderId>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.MetadataProviderId>()
                     .Property(t => t.ProviderId)
                     .HasMaxLength(255)
                     .IsRequired()
                     .HasField("_ProviderId")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MetadataProviderId>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.MetadataProviderId>()
                     .HasOne(x => x.MetadataProvider)
                     .WithOne()
                     .HasForeignKey<global::Jellyfin.Data.MetadataProviderId>("MetadataProvider_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.Movie>()
                     .HasMany(x => x.Releases)
                     .WithOne()
                     .HasForeignKey("Release_Releases_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Movie>()
                     .HasMany(x => x.MovieMetadata)
                     .WithOne()
                     .HasForeignKey("MovieMetadata_MovieMetadata_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.MovieMetadata>()
                     .Property(t => t.Outline)
                     .HasMaxLength(1024)
                     .HasField("_Outline")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MovieMetadata>()
                     .Property(t => t.Plot)
                     .HasMaxLength(65535)
                     .HasField("_Plot")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MovieMetadata>()
                     .Property(t => t.Tagline)
                     .HasMaxLength(1024)
                     .HasField("_Tagline")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MovieMetadata>()
                     .Property(t => t.Country)
                     .HasMaxLength(2)
                     .HasField("_Country")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MovieMetadata>()
                     .HasMany(x => x.Studios)
                     .WithOne()
                     .HasForeignKey("Company_Studios_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.MusicAlbum>()
                     .HasMany(x => x.MusicAlbumMetadata)
                     .WithOne()
                     .HasForeignKey("MusicAlbumMetadata_MusicAlbumMetadata_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.MusicAlbum>()
                     .HasMany(x => x.Tracks)
                     .WithOne()
                     .HasForeignKey("Track_Tracks_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.MusicAlbumMetadata>()
                     .Property(t => t.Barcode)
                     .HasMaxLength(255)
                     .HasField("_Barcode")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MusicAlbumMetadata>()
                     .Property(t => t.LabelNumber)
                     .HasMaxLength(255)
                     .HasField("_LabelNumber")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MusicAlbumMetadata>()
                     .Property(t => t.Country)
                     .HasMaxLength(2)
                     .HasField("_Country")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.MusicAlbumMetadata>()
                     .HasMany(x => x.Labels)
                     .WithOne()
                     .HasForeignKey("Company_Labels_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.Permission>()
                     .ToTable("Permissions")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Permission>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Permission>()
                     .Property(t => t.Kind)
                     .IsRequired()
                     .HasField("_Kind")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Permission>()
                     .Property(t => t.Value)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Permission>().Property<byte[]>("Timestamp").IsConcurrencyToken();

         modelBuilder.Entity<global::Jellyfin.Data.Person>()
                     .ToTable("Person")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Person>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Person>()
                     .Property(t => t.UrlId)
                     .IsRequired()
                     .HasField("_UrlId")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Person>()
                     .Property(t => t.Name)
                     .HasMaxLength(1024)
                     .IsRequired()
                     .HasField("_Name")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Person>()
                     .Property(t => t.SourceId)
                     .HasMaxLength(255)
                     .HasField("_SourceId")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Person>()
                     .Property(t => t.DateAdded)
                     .IsRequired()
                     .HasField("_DateAdded")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Person>()
                     .Property(t => t.DateModified)
                     .IsRequired()
                     .HasField("_DateModified")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Person>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.Person>()
                     .HasMany(x => x.Sources)
                     .WithOne()
                     .HasForeignKey("MetadataProviderId_Sources_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.PersonRole>()
                     .ToTable("PersonRole")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.PersonRole>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.PersonRole>()
                     .Property(t => t.Role)
                     .HasMaxLength(1024)
                     .HasField("_Role")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.PersonRole>()
                     .Property(t => t.Type)
                     .IsRequired()
                     .HasField("_Type")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.PersonRole>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.PersonRole>()
                     .HasOne(x => x.Person)
                     .WithOne()
                     .HasForeignKey<global::Jellyfin.Data.PersonRole>("Person_Id")
                     .IsRequired()
                     .OnDelete(DeleteBehavior.Cascade);
         modelBuilder.Entity<global::Jellyfin.Data.PersonRole>()
                     .HasOne(x => x.Artwork)
                     .WithOne()
                     .HasForeignKey<global::Jellyfin.Data.PersonRole>("Artwork_Artwork_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.PersonRole>()
                     .HasMany(x => x.Sources)
                     .WithOne()
                     .HasForeignKey("MetadataProviderId_Sources_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.Photo>()
                     .HasMany(x => x.PhotoMetadata)
                     .WithOne()
                     .HasForeignKey("PhotoMetadata_PhotoMetadata_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Photo>()
                     .HasMany(x => x.Releases)
                     .WithOne()
                     .HasForeignKey("Release_Releases_Id")
                     .IsRequired();


         modelBuilder.Entity<global::Jellyfin.Data.Preference>()
                     .ToTable("Preferences")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Preference>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Preference>()
                     .Property(t => t.Kind)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Preference>()
                     .Property(t => t.Value)
                     .HasMaxLength(65535)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Preference>().Property<byte[]>("Timestamp").IsConcurrencyToken();

         modelBuilder.Entity<global::Jellyfin.Data.ProviderMapping>()
                     .ToTable("ProviderMappings")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.ProviderMapping>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.ProviderMapping>()
                     .Property(t => t.ProviderName)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.ProviderMapping>()
                     .Property(t => t.ProviderSecrets)
                     .HasMaxLength(65535)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.ProviderMapping>()
                     .Property(t => t.ProviderData)
                     .HasMaxLength(65535)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.ProviderMapping>().Property<byte[]>("Timestamp").IsConcurrencyToken();

         modelBuilder.Entity<global::Jellyfin.Data.Rating>()
                     .ToTable("Rating")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Rating>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Rating>()
                     .Property(t => t.Value)
                     .IsRequired()
                     .HasField("_Value")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Rating>()
                     .Property(t => t.Votes)
                     .HasField("_Votes")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Rating>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.Rating>()
                     .HasOne(x => x.RatingType)
                     .WithOne()
                     .HasForeignKey<global::Jellyfin.Data.Rating>("RatingSource_RatingType_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.RatingSource>()
                     .ToTable("RatingType")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.RatingSource>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.RatingSource>()
                     .Property(t => t.Name)
                     .HasMaxLength(1024)
                     .HasField("_Name")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.RatingSource>()
                     .Property(t => t.MaximumValue)
                     .IsRequired()
                     .HasField("_MaximumValue")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.RatingSource>()
                     .Property(t => t.MinimumValue)
                     .IsRequired()
                     .HasField("_MinimumValue")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.RatingSource>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.RatingSource>()
                     .HasOne(x => x.Source)
                     .WithOne()
                     .HasForeignKey<global::Jellyfin.Data.RatingSource>("MetadataProviderId_Source_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.Release>()
                     .ToTable("Release")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.Release>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasField("_Id")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.Release>()
                     .Property(t => t.Name)
                     .HasMaxLength(1024)
                     .IsRequired()
                     .HasField("_Name")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Release>()
                     .Property(t => t.Timestamp)
                     .IsRequired()
                     .HasField("_Timestamp")
                     .UsePropertyAccessMode(PropertyAccessMode.Property)
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.Release>()
                     .HasMany(x => x.MediaFiles)
                     .WithOne()
                     .HasForeignKey("MediaFile_MediaFiles_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Release>()
                     .HasMany(x => x.Chapters)
                     .WithOne()
                     .HasForeignKey("Chapter_Chapters_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.Season>()
                     .Property(t => t.SeasonNumber)
                     .HasField("_SeasonNumber")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Season>()
                     .HasMany(x => x.SeasonMetadata)
                     .WithOne()
                     .HasForeignKey("SeasonMetadata_SeasonMetadata_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Season>()
                     .HasMany(x => x.Episodes)
                     .WithOne()
                     .HasForeignKey("Episode_Episodes_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.SeasonMetadata>()
                     .Property(t => t.Outline)
                     .HasMaxLength(1024)
                     .HasField("_Outline")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);

         modelBuilder.Entity<global::Jellyfin.Data.Series>()
                     .Property(t => t.Outline)
                     .HasMaxLength(1024)
                     .HasField("_Outline")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Series>()
                     .Property(t => t.AirsDayOfWeek)
                     .HasField("_AirsDayOfWeek")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Series>()
                     .Property(t => t.AirsTime)
                     .HasField("_AirsTime")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Series>()
                     .Property(t => t.FirstAired)
                     .HasField("_FirstAired")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Series>()
                     .HasMany(x => x.SeriesMetadata)
                     .WithOne()
                     .HasForeignKey("SeriesMetadata_SeriesMetadata_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Series>()
                     .HasMany(x => x.Seasons)
                     .WithOne()
                     .HasForeignKey("Season_Seasons_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.SeriesMetadata>()
                     .Property(t => t.Outline)
                     .HasMaxLength(1024)
                     .HasField("_Outline")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.SeriesMetadata>()
                     .Property(t => t.Plot)
                     .HasMaxLength(65535)
                     .HasField("_Plot")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.SeriesMetadata>()
                     .Property(t => t.Tagline)
                     .HasMaxLength(1024)
                     .HasField("_Tagline")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.SeriesMetadata>()
                     .Property(t => t.Country)
                     .HasMaxLength(2)
                     .HasField("_Country")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.SeriesMetadata>()
                     .HasMany(x => x.Networks)
                     .WithOne()
                     .HasForeignKey("Company_Networks_Id")
                     .IsRequired();

         modelBuilder.Entity<global::Jellyfin.Data.Track>()
                     .Property(t => t.TrackNumber)
                     .HasField("_TrackNumber")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Jellyfin.Data.Track>()
                     .HasMany(x => x.Releases)
                     .WithOne()
                     .HasForeignKey("Release_Releases_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.Track>()
                     .HasMany(x => x.TrackMetadata)
                     .WithOne()
                     .HasForeignKey("TrackMetadata_TrackMetadata_Id")
                     .IsRequired();


         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .ToTable("Users")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.LastLoginTimestamp)
                     .IsRequired()
                     .IsRowVersion();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.Username)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.Password)
                     .HasMaxLength(65535);
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.MustUpdatePassword)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.AudioLanguagePreference)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.AuthenticationProviderId)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.GroupedFolders)
                     .HasMaxLength(65535);
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.InvalidLoginAttemptCount)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.LatestItemExcludes)
                     .HasMaxLength(65535);
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.MyMediaExcludes)
                     .HasMaxLength(65535);
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.OrderedViews)
                     .HasMaxLength(65535);
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.SubtitleMode)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.PlayDefaultAudioTrack)
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .Property(t => t.SubtitleLanguagePrefernce)
                     .HasMaxLength(255);
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .HasMany(x => x.Groups)
                     .WithOne()
                     .HasForeignKey("Group_Groups_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .HasMany(x => x.Permissions)
                     .WithOne()
                     .HasForeignKey("Permission_Permissions_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .HasMany(x => x.ProviderMappings)
                     .WithOne()
                     .HasForeignKey("ProviderMapping_ProviderMappings_Id")
                     .IsRequired();
         modelBuilder.Entity<global::Jellyfin.Data.User>()
                     .HasMany(x => x.Preferences)
                     .WithOne()
                     .HasForeignKey("Preference_Preferences_Id")
                     .IsRequired();

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
