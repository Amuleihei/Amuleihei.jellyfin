#pragma warning disable CS1591
// <auto-generated />
using System;
using Jellyfin.Data.Enums;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Jellyfin.Server.Implementations.Migrations
{
    public partial class NewImageModel : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            // migrationBuilder.DropTable(
            //    name: "ImageInfos",
            //    schema: "jellyfin");

            migrationBuilder.AddColumn<int>(
                name: "ImageId",
                schema: "jellyfin",
                table: "Users",
                type: "INTEGER",
                nullable: true);

            // Custom migration procedures to update installations that had the old ImageInfos model
            // (see commented internal class below to see how the previous model was)

            migrationBuilder.Sql("UPDATE Users SET ImageId = (SELECT i.Id FROM ImageInfos i JOIN Users u ON i.UserId = u.Id WHERE u.Id = Users.Id)");

            migrationBuilder.AddColumn<uint>(
                name: "RowVersion",
                schema: "jellyfin",
                table: "ImageInfos",
                type: "INTEGER",
                nullable: true);

            migrationBuilder.Sql("UPDATE ImageInfos SET RowVersion = 0");

            migrationBuilder.AlterColumn<uint>(
                name: "RowVersion",
                schema: "jellyfin",
                table: "ImageInfos",
                nullable: false);

            migrationBuilder.AddColumn<int>(
                name: "Type",
                schema: "jellyfin",
                table: "ImageInfos",
                type: "INTEGER",
                nullable: true);

            int i = (int)ImageType.Profile;

            migrationBuilder.Sql("UPDATE ImageInfos SET Type = " + i.ToString());

            migrationBuilder.AlterColumn<int>(
                name: "Type",
                schema: "jellyfin",
                table: "ImageInfos",
                nullable: false);

            migrationBuilder.RenameColumn(
                name: "LastModified",
                schema: "jellyfin",
                table: "ImageInfos",
                newName: "LastModifiedDate");

            migrationBuilder.AddColumn<DateTime>(
                name: "AddedDate",
                schema: "jellyfin",
                table: "ImageInfos",
                type: "TEXT",
                nullable: true);

            migrationBuilder.Sql("UPDATE ImageInfos SET AddedDate = (SELECT i.LastModifiedDate FROM ImageInfos i WHERE i.Id = ImageInfos.Id)");

            migrationBuilder.AlterColumn<DateTime>(
                name: "AddedDate",
                schema: "jellyfin",
                table: "ImageInfos",
                nullable: false);

            migrationBuilder.AddColumn<DateTime>(
                name: "FileCreationDate",
                schema: "jellyfin",
                table: "ImageInfos",
                type: "TEXT",
                nullable: true);

            migrationBuilder.AddColumn<DateTime>(
                name: "FileModificationDate",
                schema: "jellyfin",
                table: "ImageInfos",
                type: "TEXT",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "Blurhash",
                schema: "jellyfin",
                table: "ImageInfos",
                type: "TEXT",
                nullable: true);

            migrationBuilder.DropPrimaryKey(
                name: "PK_ImageInfos",
                schema: "jellyfin",
                table: "ImageInfos");

            migrationBuilder.RenameTable(
                name: "ImageInfos",
                schema: "jellyfin",
                newName: "Images",
                newSchema: "jellyfin");

            migrationBuilder.AddColumn<Guid>(
                name: "UUID",
                schema: "jellyfin",
                table: "Images",
                type: "TEXT",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

            migrationBuilder.AddPrimaryKey(
                name: "PK_Images",
                schema: "jellyfin",
                table: "Images",
                column: "Id");

            migrationBuilder.Sql("DELETE FROM Images WHERE Id NOT IN (SELECT ImageId FROM Users)");

            // End of the custom migration procedures

            // migrationBuilder.CreateTable(
            //    name: "Images",
            //    schema: "jellyfin",
            //    columns: table => new
            //    {
            //        Id = table.Column<int>(type: "INTEGER", nullable: false)
            //            .Annotation("Sqlite:Autoincrement", true),
            //        Path = table.Column<string>(type: "TEXT", maxLength: 65535, nullable: false),
            //        Type = table.Column<int>(type: "INTEGER", nullable: false),
            //        Blurhash = table.Column<string>(type: "TEXT", nullable: true),
            //        LastModifiedDate = table.Column<DateTime>(type: "TEXT", nullable: false),
            //        AddedDate = table.Column<DateTime>(type: "TEXT", nullable: false),
            //        FileCreationDate = table.Column<DateTime>(type: "TEXT", nullable: true),
            //        FileModificationDate = table.Column<DateTime>(type: "TEXT", nullable: true),
            //        RowVersion = table.Column<uint>(type: "INTEGER", nullable: false)
            //    },
            //    constraints: table =>
            //    {
            //        table.PrimaryKey("PK_Images", x => x.Id);
            //    });

            migrationBuilder.CreateIndex(
               name: "IX_Users_ImageId",
               schema: "jellyfin",
               table: "Users",
               column: "ImageId",
               unique: true);

            migrationBuilder.AddForeignKey(
                name: "FK_Users_Images_ImageId",
                schema: "jellyfin",
                table: "Users",
                column: "ImageId",
                principalSchema: "jellyfin",
                principalTable: "Images",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Users_Images_ImageId",
                schema: "jellyfin",
                table: "Users");

            migrationBuilder.DropTable(
                name: "Images",
                schema: "jellyfin");

            migrationBuilder.DropIndex(
                name: "IX_Users_ImageId",
                schema: "jellyfin",
                table: "Users");

            migrationBuilder.DropColumn(
                name: "ImageId",
                schema: "jellyfin",
                table: "Users");

            migrationBuilder.CreateTable(
                name: "ImageInfos",
                schema: "jellyfin",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    LastModified = table.Column<DateTime>(type: "TEXT", nullable: false),
                    Path = table.Column<string>(type: "TEXT", maxLength: 512, nullable: false),
                    UserId = table.Column<Guid>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ImageInfos", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ImageInfos_Users_UserId",
                        column: x => x.UserId,
                        principalSchema: "jellyfin",
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_ImageInfos_UserId",
                schema: "jellyfin",
                table: "ImageInfos",
                column: "UserId",
                unique: true);
        }

        // Old ImageInfo schema

        //internal class ImageInfo
        //{
        //    public int Id { get; private set; }
        //    public Guid? UserId { get; private set; }
        //    public string Path { get; set; }
        //    public DateTime LastModified { get; set; }
        //}
    }
}
