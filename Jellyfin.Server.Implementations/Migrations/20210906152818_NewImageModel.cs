#pragma warning disable CS1591
// <auto-generated />
using System;
using Jellyfin.Data.Enums;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Jellyfin.Server.Implementations.Migrations
{
    public partial class NewImageModel : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "ImageId",
                schema: "jellyfin",
                table: "Users",
                type: "INTEGER",
                nullable: true);

            // As some installations already had users migrated to EFCore before the model change, we need further work to migrate that data for existing installations
            // that we don't need to do in new installs (which will use the new model from the beginning). However, migrations are DB-agnostic
            // and this means that new installs in the future might not work because we use custom SQLite code to fix the current schema.
            //
            // This custom SQL is guaranteed to always work in SQLite. However, it's not guaranteed it will in PostgreSQL, MySQL or any other DB provider.
            // Knowing this, I assume that, if we're using a different provider than SQLite, installs will ALWAYS use the new Image entity, so we can skip the
            // custom SQL and run the migration as generated by EFCore itself.
            //
            // New SQLite installs will run all the data migration process, however 0 rows will be affected in each step, so it should work regardless.
            bool sqlite = migrationBuilder.IsSqlite();

            if (sqlite)
            {
                // Custom migration procedures to update installations that had the old ImageInfos model
                // (see commented internal class below to see how the previous model was)

                migrationBuilder.Sql("UPDATE Users SET ImageId = (SELECT i.Id FROM ImageInfos i JOIN Users u ON i.UserId = u.Id WHERE u.Id = Users.Id)");

                migrationBuilder.AddColumn<uint>(
                    name: "RowVersion",
                    schema: "jellyfin",
                    table: "ImageInfos",
                    type: "INTEGER",
                    nullable: true);

                migrationBuilder.Sql("UPDATE ImageInfos SET RowVersion = 0");

                migrationBuilder.AlterColumn<uint>(
                    name: "RowVersion",
                    schema: "jellyfin",
                    table: "ImageInfos",
                    nullable: false);

                migrationBuilder.AddColumn<int>(
                    name: "Type",
                    schema: "jellyfin",
                    table: "ImageInfos",
                    type: "INTEGER",
                    nullable: true);

                int i = (int)ImageType.Profile;

                migrationBuilder.Sql("UPDATE ImageInfos SET Type = " + i.ToString());

                migrationBuilder.AlterColumn<int>(
                    name: "Type",
                    schema: "jellyfin",
                    table: "ImageInfos",
                    nullable: false);

                migrationBuilder.RenameColumn(
                    name: "LastModified",
                    schema: "jellyfin",
                    table: "ImageInfos",
                    newName: "LastModifiedDate");

                migrationBuilder.AddColumn<DateTime>(
                    name: "AddedDate",
                    schema: "jellyfin",
                    table: "ImageInfos",
                    type: "TEXT",
                    nullable: true);

                migrationBuilder.Sql("UPDATE ImageInfos SET AddedDate = (SELECT i.LastModifiedDate FROM ImageInfos i WHERE i.Id = ImageInfos.Id)");

                migrationBuilder.AlterColumn<DateTime>(
                    name: "AddedDate",
                    schema: "jellyfin",
                    table: "ImageInfos",
                    nullable: false);

                migrationBuilder.AddColumn<DateTime>(
                    name: "FileCreationDate",
                    schema: "jellyfin",
                    table: "ImageInfos",
                    type: "TEXT",
                    nullable: true);

                migrationBuilder.AddColumn<DateTime>(
                    name: "FileModificationDate",
                    schema: "jellyfin",
                    table: "ImageInfos",
                    type: "TEXT",
                    nullable: true);

                migrationBuilder.AddColumn<string>(
                    name: "Blurhash",
                    schema: "jellyfin",
                    table: "ImageInfos",
                    type: "TEXT",
                    nullable: true);

                migrationBuilder.DropPrimaryKey(
                    name: "PK_ImageInfos",
                    schema: "jellyfin",
                    table: "ImageInfos");

                migrationBuilder.AddColumn<Guid>(
                    name: "UUID",
                    schema: "jellyfin",
                    table: "ImageInfos",
                    type: "TEXT",
                    nullable: true,
                    defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

                var triggerQuery = @"CREATE TRIGGER AutoGenerateGUID
                                    AFTER UPDATE ON ImageInfos
                                    FOR EACH ROW
                                    BEGIN
                                        UPDATE ImageInfos SET UUID = (select hex(randomblob(4)) || '-' || hex(randomblob(2))
                                        || '-' || '4' || substr(hex(randomblob(2)), 2) || '-'
                                        || substr('AB89', 1 + (abs(random()) % 4), 1) ||
                                        substr(hex(randomblob(2)), 2) || '-' || hex(randomblob(6))) 
                                        WHERE rowid = NEW.rowid;
                                    END";

                migrationBuilder.Sql(triggerQuery);

                migrationBuilder.Sql("UPDATE ImageInfos SET RowVersion = 1");

                migrationBuilder.Sql("DROP TRIGGER AutoGenerateGUID");

                migrationBuilder.Sql("UPDATE Users SET RowVersion = (SELECT RowVersion+1 FROM Users u WHERE u.Id = Users.Id)");

                migrationBuilder.RenameTable(
                    name: "ImageInfos",
                    schema: "jellyfin",
                    newName: "Images",
                    newSchema: "jellyfin");

                migrationBuilder.AddPrimaryKey(
                    name: "PK_Images",
                    schema: "jellyfin",
                    table: "Images",
                    column: "Id");

                migrationBuilder.Sql("DELETE FROM Images WHERE Id NOT IN (SELECT ImageId FROM Users)");

                // End of the custom migration procedures
            }
            else
            {
                migrationBuilder.DropTable(
                    name: "ImageInfos",
                    schema: "jellyfin");

                migrationBuilder.CreateTable(
                    name: "Images",
                    schema: "jellyfin",
                    columns: table => new
                    {
                        Id = table.Column<int>(type: "INTEGER", nullable: false)
                            .Annotation("Sqlite:Autoincrement", true),
                        UUID = table.Column<Guid>(type: "TEXT", nullable: false),
                        Path = table.Column<string>(type: "TEXT", nullable: false),
                        Type = table.Column<int>(type: "INTEGER", nullable: false),
                        Blurhash = table.Column<string>(type: "TEXT", nullable: true),
                        LastModifiedDate = table.Column<DateTime>(type: "TEXT", nullable: false),
                        AddedDate = table.Column<DateTime>(type: "TEXT", nullable: false),
                        FileCreationDate = table.Column<DateTime>(type: "TEXT", nullable: true),
                        FileModificationDate = table.Column<DateTime>(type: "TEXT", nullable: true),
                        RowVersion = table.Column<uint>(type: "INTEGER", nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_Images", x => x.Id);
                    });
            }

            migrationBuilder.CreateIndex(
                name: "IX_Users_ImageId",
                schema: "jellyfin",
                table: "Users",
                column: "ImageId",
                unique: true);

            migrationBuilder.AddForeignKey(
                name: "FK_Users_Images_ImageId",
                schema: "jellyfin",
                table: "Users",
                column: "ImageId",
                principalSchema: "jellyfin",
                principalTable: "Images",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        // Old ImageInfo schema

        //internal class ImageInfo
        //{
        //    public int Id { get; private set; }
        //    public Guid? UserId { get; private set; }
        //    public string Path { get; set; }
        //    public DateTime LastModified { get; set; }
        //}
    }
}
