name: 'ðŸš€ Publish Container Images'

on:
  push:
    branches:
      - master
      - release-*
  release:
    types:
      - published
  workflow_dispatch:

concurrency: server-container

jobs:
  setup-vars:
    name: Setup Variables
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'jellyfin/jellyfin' }}

    outputs:
      stage: ${{ steps.variables.outputs.stage }}
      short-sha: ${{ steps.variables.outputs.short-sha }}
      major-minor: ${{ steps.variables.outputs.major-minor }}
      version: ${{ steps.variables.outputs.version }}
      year-week: ${{ steps.variables.outputs.year-week }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup YQ
        uses: chrisdickinson/setup-yq@latest
        with:
          yq-version: v4.9.8

      - name: Setup sariables
        id: variables
        run: |-
          if [[ "${GITHUB_REF}" =~ '^refs/tags/v.*$' ]]; then
            STAGE='stable'
          fi

          VERSION=`yq e '.version' build.yaml`
          echo "::set-output name=stage::${STAGE:-unstable}"
          echo "::set-output name=short-sha::${GITHUB_SHA::7}"
          echo "::set-output name=major-minor::${VERSION%.*}"
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=year-week::$(date -u '+%Y%W')"

  container-image:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs:
      - setup-vars

    strategy:
      fail-fast: false
      matrix:
        include:
          - image-tag: amd64
            image-config: amd64
            build-config: linux-x64
          - image-tag: arm64
            image-config: arm64
            build-config: linux-arm64
          - image-tag: armhf
            image-config: arm32
            build-config: linux-arm

    env:
      STAGE: ${{ needs.setup-vars.outputs.stage }}
      SHORT_SHA: ${{ needs.setup-vars.outputs.short-sha }}
      MAJOR_MINOR: ${{ needs.setup-vars.outputs.major-minor }}
      SEMVER: ${{ needs.setup-vars.outputs.version }}
      YEAR_WEEK: ${{ needs.setup-vars.outputs.year-week }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .Net
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Install qemu dependency
        run: |-
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

      - name: Setup build dependencies chache
        uses: actions/cache@v2
        if: ${{ github.event_name != 'release' }}
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ env.YEAR_WEEK }}

      - name: Build server against OS arch
        run: |-
          mkdir -p ci-artifact
          dotnet publish Jellyfin.Server \
            --nologo \
            --disable-parallel \
            --configuration Release \
            --output ci-artifact \
            --self-contained \
            --runtime ${{ matrix.build-config }} \
            "-p:DebugSymbols=false;DebugType=none"

      - name: Build headless server image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: jellyfin-server
          tags: >-
            ${{ env.STAGE }}-${{ matrix.image-tag }}
            ${{ env.STAGE }}-${{ env.MAJOR_MINOR }}-${{ matrix.image-tag }}
            ${{ env.STAGE }}-${{ env.SEMVER }}-${{ matrix.image-tag }}
            ${{ env.SHORT_SHA }}-${{ matrix.image-tag }}
          oci: true
          arch: ${{ matrix.image-config }}
          dockerfiles: deployment/Dockerfile.docker.${{ matrix.image-tag }}
          context: ci-artifact
          build-args: |-
            JELLYFIN_VERSION=${{ env.SEMVER }}

      - name: Publish headless server image to ghcr.io
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ghcr.io/${{ github.repository_owner }}
          username: ${{ github.actor }}
          password: ${{ secrets.JF_BOT_TOKEN }}

      - name: Publish headless server image to quay.io
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: quay.io/jellyfin
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Publish headless server image to docker.io
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: docker.io/jellyfin
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  create-manifests:
    name: Create Container collection manifests
    runs-on: ubuntu-latest
    needs:
      - setup-vars
      - container-images

    env:
      STAGE: ${{ needs.setup-vars.outputs.stage }}
      SHORT_SHA: ${{ needs.setup-vars.outputs.short-sha }}
      SEMVER: ${{ needs.setup-vars.outputs.version }}
      MAJOR_MINOR: ${{ needs.setup-vars.outputs.major-minor }}

    steps:
      - name: Create manifests
        run: |-
          podman manifest create jellyfin-server:${{ env.STAGE }}
          if [[ "${{ env.STAGE }}" == 'unstable' ]]; then
            podman manifest create jellyfin-server:${{ env.STAGE }}-${{ env.SEMVER }}
            podman manifest create jellyfin-server:${{ env.STAGE }}-${{ env.MAJOR_MINOR }}
          else
            podman manifest create jellyfin-server:latest
            podman manifest create jellyfin-server:${{ env.SEMVER }}
            podman manifest create jellyfin-server:${{ env.MAJOR_MINOR }}
          fi

      - name: Add images to manifests
        run: |-
          for arch in amd64 arm64 armhf; do
            # will fetch the manifest hash and add it to the manifest (the manifest is identical on all registry)
            podman manifest add jellyfin-server:${{ env.STAGE }} docker://ghcr.io/jellyfin/jellyfin-server:${{ env.SHORT_SHA }}-${arch}
          done
          if [[ "${{ env.STAGE }}" == 'unstable' ]]; then
            podman manifest add --all jellyfin-server:${{ env.STAGE }}-${{ env.SEMVER }} jellyfin-server:${{ env.STAGE }}
            podman manifest add --all jellyfin-server:${{ env.STAGE }}-${{ env.MAJOR_MINOR }} jellyfin-server:${{ env.STAGE }}
          else
            podman manifest add --all jellyfin-server:latest jellyfin:${{ env.STAGE }}
            podman manifest add --all jellyfin-server:${{ env.SEMVER }} jellyfin-server:${{ env.STAGE }}
            podman manifest add --all jellyfin-server:${{ env.MAJOR_MINOR }} jellyfin-server:${{ env.STAGE }}
          fi

      - name: Log in to GHCR.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: ghcr.io/jellyfin
          username: ${{ github.actor }}
          password: ${{ secrets.JF_BOT_TOKEN }}

      - name: Log in to Quay.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Log in to GHCR.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # I dont like the looks of this but there is currently no better solution YET
      - name: Push manifests
        run: |-
          for registry in 'ghcr.io' 'quay.io' 'docker.io'; do
            podman manifest push jellyfin-server:${{ env.STAGE }} docker://${registry}/jellyfin/jellyfin-server:${{ env.STAGE }}
            if [[ "${{ env.STAGE }}" == 'unstable' ]]; then
              podman manifest push jellyfin-server:${{ env.STAGE }}-${{ env.SEMVER }} docker://${registry}/jellyfin/jellyfin-server:${{ env.STAGE }}-${{ env.SEMVER }}
              podman manifest push jellyfin-server:${{ env.STAGE }}-${{ env.MAJOR_MINOR }} docker://${registry}/jellyfin/jellyfin-server:${{ env.STAGE }}-${{ env.MAJOR_MINOR }}
            else
              podman manifest push jellyfin-server:latest docker://${registry}/jellyfin/jellyfin:latest
              podman manifest push jellyfin-server:${{ env.SEMVER }} docker://${registry}/jellyfin/jellyfin-server:${{ env.SEMVER }}
              podman manifest push jellyfin-server:${{ env.MAJOR_MINOR }} docker://${registry}/jellyfin/jellyfin-server:${{ env.MAJOR_MINOR }}
            fi
          done

  trigger-meta:
    name: Triger Meta Container Image builds
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - setup-vars
      - container-image

    env:
      SHORT_SHA: ${{ needs.setup-vars.outputs.short-sha }}
      SEMVER: ${{ needs.setup-vars.outputs.version }}
      STAGE: ${{ needs.setup-vars.outputs.stage }}

    steps:
      - name: Trigger Metacontainer image build
        uses: peter-evans/repository-dispatch@v1
        continue-on-error: true
        with:
          token: ${{ secrets.JF_BOT_TOKEN }}
          repository: jellyfin/jellyfin-metapackages
          event-type: trigger-meta-container
          client-payload: |-
            {
              "type": "server",
              "version": "${{ env.SEMVER }}",
              "server-sha": "${{ env.SHORT_SHA }}",
              "unstable": ${{ env.STAGE != 'stable' }}
            }
